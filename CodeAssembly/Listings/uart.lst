


ARM Macro Assembler    Page 1 


    1 00000000         ; UART.s
    2 00000000         ; Runs on LM4F120/TM4C123
    3 00000000         ; Use UART0 to implement bidirectional data transfer to 
                       and from a
    4 00000000         ; computer running HyperTerminal.  This time, interrupts
                        and FIFOs
    5 00000000         ; are used.
    6 00000000         ; This file is named "UART2" because it is the second UA
                       RT example.
    7 00000000         ; It is not related to the UART2 module on the microcont
                       roller.
    8 00000000         ; Daniel Valvano
    9 00000000         ; September 12, 2013
   10 00000000         
   11 00000000         ;  This example accompanies the book
   12 00000000         ;  "Embedded Systems: Real Time Interfacing to Arm Corte
                       x M Microcontrollers",
   13 00000000         ;  ISBN: 978-1463590154, Jonathan Valvano, copyright (c)
                        2015
   14 00000000         ;  Program 5.11 Section 5.6, Program 3.10
   15 00000000         ;
   16 00000000         ;Copyright 2015 by Jonathan W. Valvano, valvano@mail.ute
                       xas.edu
   17 00000000         ;   You may use, edit, run or distribute this file
   18 00000000         ;   as long as the above copyright notice remains
   19 00000000         ;THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHET
                       HER EXPRESS, IMPLIED
   20 00000000         ;OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WA
                       RRANTIES OF
   21 00000000         ;MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AP
                       PLY TO THIS SOFTWARE.
   22 00000000         ;VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR 
                       SPECIAL, INCIDENTAL,
   23 00000000         ;OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   24 00000000         ;For more information about my classes, my research, and
                        my books, see
   25 00000000         ;http://users.ece.utexas.edu/~valvano/
   26 00000000         
   27 00000000         ; U0Rx (VCP receive) connected to PA0
   28 00000000         ; U0Tx (VCP transmit) connected to PA1
   29 00000000         
   30 00000000 00000020 
                       NVIC_EN0_INT5
                               EQU              0x00000020  ; Interrupt 5 enabl
                                                            e
   31 00000000 E000E100 
                       NVIC_EN0_R
                               EQU              0xE000E100  ; IRQ 0 to 31 Set E
                                                            nable Register
   32 00000000 E000E404 
                       NVIC_PRI1_R
                               EQU              0xE000E404  ; IRQ 4 to 7 Priori
                                                            ty Register
   33 00000000 40004420 
                       GPIO_PORTA_AFSEL_R
                               EQU              0x40004420
   34 00000000 4000451C 
                       GPIO_PORTA_DEN_R
                               EQU              0x4000451C



ARM Macro Assembler    Page 2 


   35 00000000 40004528 
                       GPIO_PORTA_AMSEL_R
                               EQU              0x40004528
   36 00000000 4000452C 
                       GPIO_PORTA_PCTL_R
                               EQU              0x4000452C
   37 00000000 4000C000 
                       UART0_DR_R
                               EQU              0x4000C000
   38 00000000 4000C018 
                       UART0_FR_R
                               EQU              0x4000C018
   39 00000000 4000C024 
                       UART0_IBRD_R
                               EQU              0x4000C024
   40 00000000 4000C028 
                       UART0_FBRD_R
                               EQU              0x4000C028
   41 00000000 4000C02C 
                       UART0_LCRH_R
                               EQU              0x4000C02C
   42 00000000 4000C030 
                       UART0_CTL_R
                               EQU              0x4000C030
   43 00000000 4000C034 
                       UART0_IFLS_R
                               EQU              0x4000C034
   44 00000000 4000C038 
                       UART0_IM_R
                               EQU              0x4000C038
   45 00000000 4000C03C 
                       UART0_RIS_R
                               EQU              0x4000C03C
   46 00000000 4000C044 
                       UART0_ICR_R
                               EQU              0x4000C044
   47 00000000 00000040 
                       UART_FR_RXFF
                               EQU              0x00000040  ; UART Receive FIFO
                                                             Full
   48 00000000 00000020 
                       UART_FR_TXFF
                               EQU              0x00000020  ; UART Transmit FIF
                                                            O Full
   49 00000000 00000010 
                       UART_FR_RXFE
                               EQU              0x00000010  ; UART Receive FIFO
                                                             Empty
   50 00000000 00000060 
                       UART_LCRH_WLEN_8
                               EQU              0x00000060  ; 8 bit word length
                                                            
   51 00000000 00000010 
                       UART_LCRH_FEN
                               EQU              0x00000010  ; UART Enable FIFOs
                                                            
   52 00000000 00000001 
                       UART_CTL_UARTEN
                               EQU              0x00000001  ; UART Enable



ARM Macro Assembler    Page 3 


   53 00000000 00000000 
                       UART_IFLS_RX1_8
                               EQU              0x00000000  ; RX FIFO >= 1/8 fu
                                                            ll
   54 00000000 00000000 
                       UART_IFLS_TX1_8
                               EQU              0x00000000  ; TX FIFO <= 1/8 fu
                                                            ll
   55 00000000 00000040 
                       UART_IM_RTIM
                               EQU              0x00000040  ; UART Receive Time
                                                            -Out Interrupt
   56 00000000         ; Mask
   57 00000000 00000020 
                       UART_IM_TXIM
                               EQU              0x00000020  ; UART Transmit Int
                                                            errupt Mask
   58 00000000 00000010 
                       UART_IM_RXIM
                               EQU              0x00000010  ; UART Receive Inte
                                                            rrupt Mask
   59 00000000 00000040 
                       UART_RIS_RTRIS
                               EQU              0x00000040  ; UART Receive Time
                                                            -Out Raw
   60 00000000         ; Interrupt Status
   61 00000000 00000020 
                       UART_RIS_TXRIS
                               EQU              0x00000020  ; UART Transmit Raw
                                                             Interrupt
   62 00000000         ; Status
   63 00000000 00000010 
                       UART_RIS_RXRIS
                               EQU              0x00000010  ; UART Receive Raw 
                                                            Interrupt
   64 00000000         ; Status
   65 00000000 00000040 
                       UART_ICR_RTIC
                               EQU              0x00000040  ; Receive Time-Out 
                                                            Interrupt Clear
   66 00000000 00000020 
                       UART_ICR_TXIC
                               EQU              0x00000020  ; Transmit Interrup
                                                            t Clear
   67 00000000 00000010 
                       UART_ICR_RXIC
                               EQU              0x00000010  ; Receive Interrupt
                                                             Clear
   68 00000000 400FE608 
                       SYSCTL_RCGCGPIO_R
                               EQU              0x400FE608
   69 00000000 400FE618 
                       SYSCTL_RCGCUART_R
                               EQU              0x400FE618
   70 00000000         
   71 00000000                 IMPORT           DisableInterrupts ; Disable int
                                                            errupts
   72 00000000                 IMPORT           EnableInterrupts 
                                                            ; Enable interrupts



ARM Macro Assembler    Page 4 


                                                            
   73 00000000                 IMPORT           StartCritical ; previous I bit,
                                                             disable interrupts
                                                            
   74 00000000                 IMPORT           EndCritical ; restore I bit to 
                                                            previous value
   75 00000000                 IMPORT           WaitForInterrupt 
                                                            ; low power mode
   76 00000000         
   77 00000000         ; properties from FIFO.c
   78 00000000         ; size of the FIFOs (must be power of 2)
   79 00000000 00000010 
                       FIFOSIZE
                               EQU              16          ; (copy this value 
                                                            from both places in
                                                             FIFO.s)
   80 00000000 00000001 
                       FIFOSUCCESS
                               EQU              1           ; return value on s
                                                            uccess
   81 00000000 00000000 
                       FIFOFAIL
                               EQU              0           ; return value on f
                                                            ailure
   82 00000000         
   83 00000000         ; functions from FIFO.s
   84 00000000                 IMPORT           TxFifo_Init
   85 00000000                 IMPORT           TxFifo_Put
   86 00000000                 IMPORT           TxFifo_Get
   87 00000000                 IMPORT           TxFifo_Size
   88 00000000                 IMPORT           RxFifo_Init
   89 00000000                 IMPORT           RxFifo_Put
   90 00000000                 IMPORT           RxFifo_Get
   91 00000000                 IMPORT           RxFifo_Size
   92 00000000         
   93 00000000         ; standard ASCII symbols
   94 00000000 0000000D 
                       CR      EQU              0x0D
   95 00000000 0000000A 
                       LF      EQU              0x0A
   96 00000000 00000008 
                       BS      EQU              0x08
   97 00000000 0000001B 
                       ESC     EQU              0x1B
   98 00000000 00000020 
                       SPA     EQU              0x20
   99 00000000 0000007F 
                       DEL     EQU              0x7F
  100 00000000         
  101 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
  102 00000000                 THUMB
  103 00000000                 EXPORT           UART_Init
  104 00000000                 EXPORT           UART_InChar
  105 00000000                 EXPORT           UART_OutChar
  106 00000000                 EXPORT           UART0_Handler
  107 00000000         
  108 00000000         ; require C function calls to preserve the 8-byte alignm
                       ent of 8-byte data objects



ARM Macro Assembler    Page 5 


  109 00000000                 PRESERVE8
  110 00000000         
  111 00000000         ;------------UART_Init------------
  112 00000000         ; Initialize UART0
  113 00000000         ; Baud rate is 115200 bits/sec
  114 00000000         ; Input: none
  115 00000000         ; Output: none
  116 00000000         ; Modifies: R0, R1
  117 00000000         ; Assumes: 50 MHz system clock
  118 00000000         UART_Init
  119 00000000 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  120 00000002 F7FF FFFE       BL               DisableInterrupts ; disable all
                                                             interrupts (critic
                                                            al section)
  121 00000006         ; activate clock for UART0
  122 00000006 4963            LDR              R1, =SYSCTL_RCGCUART_R ; R1 = &
                                                            SYSCTL_RCGCUART_R
  123 00000008 6808            LDR              R0, [R1]    ; R0 = [R1]
  124 0000000A F040 0001       ORR              R0, R0, #0x01 ; enable UART0
  125 0000000E 6008            STR              R0, [R1]    ; [R1] = R0
  126 00000010         ; activate clock for port A
  127 00000010 4961            LDR              R1, =SYSCTL_RCGCGPIO_R ; R1 = &
                                                            SYSCTL_RCGCGPIO_R
  128 00000012 6808            LDR              R0, [R1]    ; R0 = [R1]
  129 00000014 F040 0001       ORR              R0, R0, #0x01 ; enable Port A
  130 00000018 6008            STR              R0, [R1]    ; [R1] = R0
  131 0000001A         ; initialize empty FIFOs
  132 0000001A F7FF FFFE       BL               RxFifo_Init
  133 0000001E F7FF FFFE       BL               TxFifo_Init
  134 00000022         ; disable UART
  135 00000022 495E            LDR              R1, =UART0_CTL_R 
                                                            ; R1 = &UART0_CTL_R
                                                            
  136 00000024 6808            LDR              R0, [R1]    ; R0 = [R1]
  137 00000026 F020 0001       BIC              R0, R0, #UART_CTL_UARTEN ; R0 =
                                                             R0&~UART_CTL_UARTE
                                                            N (disable UART)
  138 0000002A 6008            STR              R0, [R1]    ; [R1] = R0
  139 0000002C         ; set the baud rate (equations on p845 of datasheet)
  140 0000002C 495C            LDR              R1, =UART0_IBRD_R ; R1 = &UART0
                                                            _IBRD_R
  141 0000002E F04F 00A2       MOV              R0, #162    ;  R0 = IBRD = int(
                                                            50,000,000 / (16 * 
                                                            19200)) = int(162.7
                                                            604167)
  142 00000032 6008            STR              R0, [R1]    ; [R1] = R0
  143 00000034 495B            LDR              R1, =UART0_FBRD_R ; R1 = &UART0
                                                            _FBRD_R
  144 00000036 F04F 0030       MOV              R0, #48     ; R0 = FBRD = int(0
                                                            .7604166667 * 64 - 
                                                            0.66) = 48
  145 0000003A 6008            STR              R0, [R1]    ; [R1] = R0
  146 0000003C         ; configure Line Control Register settings
  147 0000003C 495A            LDR              R1, =UART0_LCRH_R ; R1 = &UART0
                                                            _LCRH_R
  148 0000003E 6808            LDR              R0, [R1]    ; R0 = [R1]
  149 00000040 F020 00FF       BIC              R0, R0, #0xFF ; R0 = R0&~0xFF (
                                                            clear all fields)



ARM Macro Assembler    Page 6 


  150 00000044         ; 8 bit word length, no parity bits, one stop bit, FIFOs
                       
  151 00000044 F100 0070       ADD              R0, R0, #(UART_LCRH_WLEN_8+UART
_LCRH_FEN)
  152 00000048 6008            STR              R0, [R1]    ; [R1] = R0
  153 0000004A         ; configure Interrupt FIFO Level Select Register setting
                       s
  154 0000004A 4958            LDR              R1, =UART0_IFLS_R ; R1 = &UART0
                                                            _IFLS_R
  155 0000004C 6808            LDR              R0, [R1]    ; R0 = [R1]
  156 0000004E F020 003F       BIC              R0, R0, #0x3F ; R0 = R0&~0x3F (
                                                            clear TX and RX int
                                                            errupt FIFO level f
                                                            ields)
  157 00000052         ; configure interrupt for TX FIFO <= 1/8 full
  158 00000052         ; configure interrupt for RX FIFO >= 1/8 full
  159 00000052 F100 0000       ADD              R0, R0, #(UART_IFLS_TX1_8+UART_
IFLS_RX1_8)
  160 00000056 6008            STR              R0, [R1]    ; [R1] = R0
  161 00000058         ; enable interrupts to be requested upon certain conditi
                       ons
  162 00000058         ; TX FIFO interrupt: when TX FIFO <= 2 elements (<= 1/8 
                       full, configured above)
  163 00000058         ; RX FIFO interrupt; when RX FIFO >= 2 elements (>= 1/8 
                       full, configured above)
  164 00000058         ; RX time-out interrupt: receive FIFO not empty and no m
                       ore data received in next 32-bit timeframe
  165 00000058         ;               (this causes an interrupt after each key
                       stroke, rather than every other keystroke)
  166 00000058 4955            LDR              R1, =UART0_IM_R 
                                                            ; R1 = &UART0_IM_R
  167 0000005A 6808            LDR              R0, [R1]    ; R0 = [R1]
  168 0000005C         ; enable TX and RX FIFO interrupts and RX time-out inter
                       rupt
  169 0000005C F040 0070       ORR              R0, R0, #(UART_IM_RXIM+UART_IM_
TXIM+UART_IM_RTIM)
  170 00000060 6008            STR              R0, [R1]    ; [R1] = R0
  171 00000062         ; enable UART
  172 00000062 494E            LDR              R1, =UART0_CTL_R 
                                                            ; R1 = &UART0_CTL_R
                                                            
  173 00000064 6808            LDR              R0, [R1]    ; R0 = [R1]
  174 00000066 F040 0001       ORR              R0, R0, #UART_CTL_UARTEN ; R0 =
                                                             R0|UART_CTL_UARTEN
                                                             (enable UART)
  175 0000006A 6008            STR              R0, [R1]    ; [R1] = R0
  176 0000006C         ; enable alternate function
  177 0000006C 4951            LDR              R1, =GPIO_PORTA_AFSEL_R ; R1 = 
                                                            &GPIO_PORTA_AFSEL_R
                                                            
  178 0000006E 6808            LDR              R0, [R1]    ; R0 = [R1]
  179 00000070 F040 0003       ORR              R0, R0, #0x03 ; R0 = R0|0x03 (e
                                                            nable alt funct on 
                                                            PA1-0)
  180 00000074 6008            STR              R0, [R1]    ; [R1] = R0
  181 00000076         ; enable digital port
  182 00000076 4950            LDR              R1, =GPIO_PORTA_DEN_R ; R1 = &G
                                                            PIO_PORTA_DEN_R
  183 00000078 6808            LDR              R0, [R1]    ; R0 = [R1]



ARM Macro Assembler    Page 7 


  184 0000007A F040 0003       ORR              R0, R0, #0x03 ; R0 = R0|0x03 (e
                                                            nable digital I/O o
                                                            n PA1-0)
  185 0000007E 6008            STR              R0, [R1]    ; [R1] = R0
  186 00000080         ; configure as UART
  187 00000080 494E            LDR              R1, =GPIO_PORTA_PCTL_R ; R1 = &
                                                            GPIO_PORTA_PCTL_R
  188 00000082 6808            LDR              R0, [R1]    ; R0 = [R1]
  189 00000084 F020 00FF       BIC              R0, R0, #0x000000FF ; R0 = R0&~
                                                            0x000000FF (clear p
                                                            ort control field f
                                                            or PA1-0)
  190 00000088 F100 0011       ADD              R0, R0, #0x00000011 ; R0 = R0+0
                                                            x00000011 (configur
                                                            e PA1-0 as UART)
  191 0000008C 6008            STR              R0, [R1]    ; [R1] = R0
  192 0000008E         ; disable analog functionality
  193 0000008E 494C            LDR              R1, =GPIO_PORTA_AMSEL_R ; R1 = 
                                                            &GPIO_PORTA_AMSEL_R
                                                            
  194 00000090 F04F 0000       MOV              R0, #0      ; R0 = 0 (disable a
                                                            nalog functionality
                                                             on PA)
  195 00000094 6008            STR              R0, [R1]    ; [R1] = R0
  196 00000096         ; set the priority of the UART interrupt
  197 00000096 494B            LDR              R1, =NVIC_PRI1_R 
                                                            ; R1 = &NVIC_PRI1_R
                                                            
  198 00000098 6808            LDR              R0, [R1]    ; R0 = [R1]
  199 0000009A F420 407F       BIC              R0, R0, #0x0000FF00 ; R0 = R0&~
                                                            0xFFFF00FF (clear N
                                                            VIC priority field 
                                                            for UART0 interrupt
                                                            )
  200 0000009E F500 4080       ADD              R0, R0, #0x00004000 ; R0 = R0+0
                                                            x00004000 (UART0 = 
                                                            priority 2; stored 
                                                            in bits 13-15)
  201 000000A2 6008            STR              R0, [R1]    ; [R1] = R0
  202 000000A4         ; enable interrupt 5 in NVIC
  203 000000A4 4948            LDR              R1, =NVIC_EN0_R 
                                                            ; R1 = &NVIC_EN0_R
  204 000000A6 F04F 0020       LDR              R0, =NVIC_EN0_INT5 ; R0 = NVIC_
                                                            EN0_INT5 (zeros wri
                                                            tten to enable regi
                                                            ster have no effect
                                                            )
  205 000000AA 6008            STR              R0, [R1]    ; [R1] = R0
  206 000000AC F7FF FFFE       BL               EnableInterrupts ; enable all i
                                                            nterrupts (end of c
                                                            ritical section)
  207 000000B0 BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  208 000000B2         
  209 000000B2         ; private helper subroutine
  210 000000B2         ; copy from hardware RX FIFO to software RX FIFO
  211 000000B2         ; stop when hardware RX FIFO is empty or software RX FIF
                       O is full



ARM Macro Assembler    Page 8 


  212 000000B2         ; Modifies: R0, R1
  213 000000B2         copyHardwareToSoftware
  214 000000B2 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  215 000000B4         h2sloop
  216 000000B4         ; repeat the loop while (hardware receive FIFO not empty
                       ) and (software receive FIFO not full)
  217 000000B4 4945            LDR              R1, =UART0_FR_R 
                                                            ; R1 = &UART0_FR_R
  218 000000B6 6808            LDR              R0, [R1]    ; R0 = [R1]
  219 000000B8 F000 0010       AND              R0, R0, #UART_FR_RXFE ; R0 = R0
                                                            &UART_FR_RXFE
  220 000000BC 2810            CMP              R0, #UART_FR_RXFE ; is R0 (UART
                                                            0_FR_R&UART_FR_RXFE
                                                            ) == UART_FR_RXFE? 
                                                            (is hardware receiv
                                                            e FIFO empty?)
  221 000000BE D008            BEQ              h2sdone     ; if so, skip to 'h
                                                            2sdone'
  222 000000C0 F7FF FFFE       BL               RxFifo_Size
  223 000000C4 280F            CMP              R0, #(FIFOSIZE - 1) ; is R0 (Rx
                                                            Fifo_Size()) == (FI
                                                            FOSIZE - 1)? (is so
                                                            ftware receive FIFO
                                                             full?)
  224 000000C6 D004            BEQ              h2sdone     ; if so, skip to 'h
                                                            2sdone'
  225 000000C8         ; read a character from the hardware FIFO
  226 000000C8 4941            LDR              R1, =UART0_DR_R 
                                                            ; R1 = &UART0_DR_R
  227 000000CA 6808            LDR              R0, [R1]    ; R0 = [R1]
  228 000000CC         ; store R0 (UART0_DR_R) in software receive FIFO
  229 000000CC F7FF FFFE       BL               RxFifo_Put
  230 000000D0 E7F0            B                h2sloop     ; unconditional bra
                                                            nch to 'h2sloop'
  231 000000D2         h2sdone
  232 000000D2 BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  233 000000D4         
  234 000000D4         ; private helper subroutine
  235 000000D4         ; copy from software TX FIFO to hardware TX FIFO
  236 000000D4         ; stop when software TX FIFO is empty or hardware TX FIF
                       O is full
  237 000000D4         copySoftwareToHardware
  238 000000D4 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  239 000000D6         s2hloop
  240 000000D6         ; repeat the loop while (hardware transmit FIFO not full
                       ) and (software transmit FIFO not empty)
  241 000000D6 493D            LDR              R1, =UART0_FR_R 
                                                            ; R1 = &UART0_FR_R
  242 000000D8 6808            LDR              R0, [R1]    ; R0 = [R1]
  243 000000DA F000 0020       AND              R0, R0, #UART_FR_TXFF ; R0 = R0
                                                            &UART_FR_TXFF
  244 000000DE 2820            CMP              R0, #UART_FR_TXFF ; is R0 (UART
                                                            0_FR_R&UART_FR_TXFF
                                                            ) == UART_FR_TXFF? 
                                                            (is hardware transm



ARM Macro Assembler    Page 9 


                                                            it FIFO full?)
  245 000000E0 D00B            BEQ              s2hdone     ; if so, skip to 's
                                                            2hdone'
  246 000000E2 F7FF FFFE       BL               TxFifo_Size
  247 000000E6 2800            CMP              R0, #0      ; is R0 (TxFifo_Siz
                                                            e()) == 0? (is soft
                                                            ware transmit FIFO 
                                                            empty?)
  248 000000E8 D007            BEQ              s2hdone     ; if so, skip to 's
                                                            2hdone'
  249 000000EA         ; read a character from the software FIFO
  250 000000EA B401            PUSH             {R0}        ; allocate local va
                                                            riable
  251 000000EC 4668            MOV              R0, SP      ; R0 = SP (R0 point
                                                            s to local variable
                                                            )
  252 000000EE F7FF FFFE       BL               TxFifo_Get  ; get from software
                                                             transmit FIFO into
                                                             pointer R0
  253 000000F2 BC01            POP              {R0}        ; pop data into R0
  254 000000F4         ; store R0 (data from TxFifo_Get()) in hardware transmit
                        FIFO
  255 000000F4 4936            LDR              R1, =UART0_DR_R 
                                                            ; R1 = &UART0_DR_R
  256 000000F6 6008            STR              R0, [R1]    ; [R1] = R0
  257 000000F8 E7ED            B                s2hloop     ; unconditional bra
                                                            nch to 'h2sloop'
  258 000000FA         s2hdone
  259 000000FA BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  260 000000FC         
  261 000000FC         ;------------UART_InChar------------
  262 000000FC         ; input ASCII character from UART
  263 000000FC         ; spin if RxFifo is empty
  264 000000FC         ; Input: none
  265 000000FC         ; Output: R0  character in from UART
  266 000000FC         ; Very Important: The UART0 interrupt handler automatica
                       lly
  267 000000FC         ;  empties the hardware receive FIFO into the software F
                       IFO as
  268 000000FC         ;  the hardware gets data.  If the UART0 interrupt is
  269 000000FC         ;  disabled, the software receive FIFO may become empty,
                        and
  270 000000FC         ;  this function will stall forever.
  271 000000FC         ;  Ensure that the UART0 module is initialized and its
  272 000000FC         ;  interrupt is enabled before calling this function.  D
                       o not
  273 000000FC         ;  use UART I/O functions within a critical section of y
                       our
  274 000000FC         ;  main program.
  275 000000FC         UART_InChar
  276 000000FC F04F 0000       MOV              R0, #0      ; initialize local 
                                                            variable
  277 00000100 B501            PUSH             {R0, LR}    ; save current valu
                                                            e of LR and allocat
                                                            e local variable
  278 00000102         inCharLoop
  279 00000102 4668            MOV              R0, SP      ; R0 = SP (R0 point



ARM Macro Assembler    Page 10 


                                                            s to local variable
                                                            )
  280 00000104 F7FF FFFE       BL               RxFifo_Get  ; get from software
                                                             receive FIFO into 
                                                            pointer R0
  281 00000108 2800            CMP              R0, #FIFOFAIL ; is R0 (RxFifo_G
                                                            et()) == FIFOFAIL (
                                                            value returned when
                                                             FIFO empty)?
  282 0000010A D0FA            BEQ              inCharLoop  ; if so, skip to 'i
                                                            nCharLoop' (spin un
                                                            til receive a chara
                                                            cter)
  283 0000010C BD01            POP              {R0, PC}    ; pop data into R0 
                                                            and restore LR into
                                                             PC (return)
  284 0000010E         
  285 0000010E         ;------------UART_OutChar------------
  286 0000010E         ; output ASCII character to UART
  287 0000010E         ; spin if TxFifo is full
  288 0000010E         ; Input: R0  character out to UART
  289 0000010E         ; Output: none
  290 0000010E         ; Modifies: R0, R1
  291 0000010E         ; Very Important: The UART0 interrupt handler automatica
                       lly
  292 0000010E         ;  empties the software transmit FIFO into the hardware 
                       FIFO as
  293 0000010E         ;  the hardware sends data.  If the UART0 interrupt is
  294 0000010E         ;  disabled, the software transmit FIFO may become full,
                        and
  295 0000010E         ;  this function will stall forever.
  296 0000010E         ;  Ensure that the UART0 module is initialized and its
  297 0000010E         ;  interrupt is enabled before calling this function.  D
                       o not
  298 0000010E         ;  use UART I/O functions within a critical section of y
                       our
  299 0000010E         ;  main program.
  300 0000010E         UART_OutChar
  301 0000010E B510            PUSH             {R4, LR}    ; save current valu
                                                            e of R4 and LR
  302 00000110 4604            MOV              R4, R0      ; R4 = R0 (save the
                                                             output character)
  303 00000112         outCharLoop
  304 00000112 4620            MOV              R0, R4      ; R0 = R4 (recall t
                                                            he output character
                                                            )
  305 00000114 F7FF FFFE       BL               TxFifo_Put  ; store R0 (output 
                                                            character) in softw
                                                            are transmit FIFO
  306 00000118 2800            CMP              R0, #FIFOFAIL ; is R0 (TxFifo_P
                                                            ut()) == FIFOFAIL (
                                                            value returned when
                                                             FIFO full)?
  307 0000011A D0FA            BEQ              outCharLoop ; if so, skip to 'o
                                                            utCharLoop' (spin u
                                                            ntil space in softw
                                                            are transmit FIFO)
  308 0000011C 4C24            LDR              R4, =UART0_IM_R 
                                                            ; R4 = &UART0_IM_R



ARM Macro Assembler    Page 11 


  309 0000011E 6820            LDR              R0, [R4]    ; R0 = [R4]
  310 00000120 F020 0020       BIC              R0, R0, #UART_IM_TXIM ; R0 = R0
                                                            &~UART_IM_TXIM (dis
                                                            able TX FIFO interr
                                                            upt)
  311 00000124 6020            STR              R0, [R4]    ; [R4] = R0
  312 00000126 F7FF FFD5       BL               copySoftwareToHardware ; privat
                                                            e helper subroutine
                                                            
  313 0000012A 6820            LDR              R0, [R4]    ; R0 = [R4]
  314 0000012C F040 0020       ORR              R0, R0, #UART_IM_TXIM ; R0 = R0
                                                            |UART_IM_TXIM (enab
                                                            le TX FIFO interrup
                                                            t)
  315 00000130 6020            STR              R0, [R4]    ; [R4] = R0
  316 00000132 BD10            POP              {R4, PC}    ; restore previous 
                                                            value of R4 into R4
                                                             and LR into PC (re
                                                            turn)
  317 00000134         
  318 00000134         ;------------UART0_Handler------------
  319 00000134         ; at least one of three things has happened:
  320 00000134         ; hardware TX FIFO goes from 3 to 2 or less items
  321 00000134         ; hardware RX FIFO goes from 1 to 2 or more items
  322 00000134         ; UART receiver has timed out
  323 00000134         UART0_Handler
  324 00000134 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  325 00000136         ; check the flags to determine which interrupt condition
                        occurred
  326 00000136         handlerCheck0
  327 00000136 4927            LDR              R1, =UART0_RIS_R 
                                                            ; R1 = &UART0_RIS_R
                                                            
  328 00000138 6808            LDR              R0, [R1]    ; R0 = [R1]
  329 0000013A F000 0020       AND              R0, R0, #UART_RIS_TXRIS ; R0 = 
                                                            R0&UART_RIS_TXRIS
  330 0000013E 2820            CMP              R0, #UART_RIS_TXRIS ; is R0 (UA
                                                            RT0_RIS_R&UART_RIS_
                                                            TXRIS) == UART_RIS_
                                                            TXRIS? (does hardwa
                                                            re TX FIFO have <= 
                                                            2 items?)
  331 00000140 D10E            BNE              handlerCheck1 ; if not, skip to
                                                             'handlerCheck1' an
                                                            d check the next fl
                                                            ag
  332 00000142         ; acknowledge TX FIFO interrupt
  333 00000142 4925            LDR              R1, =UART0_ICR_R 
                                                            ; R1 = &UART0_ICR_R
                                                            
  334 00000144 F04F 0020       LDR              R0, =UART_ICR_TXIC ; R0 = UART_
                                                            ICR_TXIC (zeros wri
                                                            tten to interrupt c
                                                            lear register have 
                                                            no effect)
  335 00000148 6008            STR              R0, [R1]    ; [R1] = R0
  336 0000014A         ; copy from software TX FIFO to hardware TX FIFO
  337 0000014A F7FF FFC3       BL               copySoftwareToHardware ; privat



ARM Macro Assembler    Page 12 


                                                            e helper subroutine
                                                            
  338 0000014E         ; if the software transmit FIFO is now empty, disable TX
                        FIFO interrupt
  339 0000014E         ; UART_OutChar() will re-enable the TX FIFO interrupt wh
                       en it is needed
  340 0000014E F7FF FFFE       BL               TxFifo_Size
  341 00000152 2800            CMP              R0, #0      ; is R0 (TxFifo_Siz
                                                            e()) == 0? (is soft
                                                            ware transmit FIFO 
                                                            empty?)
  342 00000154 D104            BNE              handlerCheck1 ; if not, skip to
                                                             'handlerCheck1'
  343 00000156 4916            LDR              R1, =UART0_IM_R 
                                                            ; R1 = &UART0_IM_R
  344 00000158 6808            LDR              R0, [R1]    ; R0 = [R1]
  345 0000015A F020 0020       BIC              R0, R0, #UART_IM_TXIM ; R0 = R0
                                                            &~UART_IM_TXIM (dis
                                                            able TX FIFO interr
                                                            upt)
  346 0000015E 6008            STR              R0, [R1]    ; [R1] = R0
  347 00000160         handlerCheck1
  348 00000160 491C            LDR              R1, =UART0_RIS_R 
                                                            ; R1 = &UART0_RIS_R
                                                            
  349 00000162 6808            LDR              R0, [R1]    ; R0 = [R1]
  350 00000164 F000 0010       AND              R0, R0, #UART_RIS_RXRIS ; R0 = 
                                                            R0&UART_RIS_RXRIS
  351 00000168 2810            CMP              R0, #UART_RIS_RXRIS ; is R0 (UA
                                                            RT0_RIS_R&UART_RIS_
                                                            RXRIS) == UART_RIS_
                                                            RXRIS? (does hardwa
                                                            re RX FIFO have >= 
                                                            2 items?)
  352 0000016A D105            BNE              handlerCheck2 ; if not, skip to
                                                             'handlerCheck2' an
                                                            d check the next fl
                                                            ag
  353 0000016C         ; acknowledge RX FIFO interrupt
  354 0000016C 491A            LDR              R1, =UART0_ICR_R 
                                                            ; R1 = &UART0_ICR_R
                                                            
  355 0000016E F04F 0010       LDR              R0, =UART_ICR_RXIC ; R0 = UART_
                                                            ICR_RXIC (zeros wri
                                                            tten to interrupt c
                                                            lear register have 
                                                            no effect)
  356 00000172 6008            STR              R0, [R1]    ; [R1] = R0
  357 00000174         ; copy from hardware RX FIFO to software RX FIFO
  358 00000174 F7FF FF9D       BL               copyHardwareToSoftware ; privat
                                                            e helper subroutine
                                                            
  359 00000178         handlerCheck2
  360 00000178 4916            LDR              R1, =UART0_RIS_R 
                                                            ; R1 = &UART0_RIS_R
                                                            
  361 0000017A 6808            LDR              R0, [R1]    ; R0 = [R1]
  362 0000017C F000 0040       AND              R0, R0, #UART_RIS_RTRIS ; R0 = 
                                                            R0&UART_RIS_RTRIS



ARM Macro Assembler    Page 13 


  363 00000180 2840            CMP              R0, #UART_RIS_RTRIS ; is R0 (UA
                                                            RT0_RIS_R&UART_RIS_
                                                            RTRIS) == UART_RIS_
                                                            RTRIS? (did the rec
                                                            eiver timeout?)
  364 00000182 D105            BNE              handlerDone ; if not, skip to '
                                                            handlerDone'
  365 00000184         ; acknowledge receiver timeout interrupt
  366 00000184 4914            LDR              R1, =UART0_ICR_R 
                                                            ; R1 = &UART0_ICR_R
                                                            
  367 00000186 F04F 0040       LDR              R0, =UART_ICR_RTIC ; R0 = UART_
                                                            ICR_RTIC (zeros wri
                                                            tten to interrupt c
                                                            lear register have 
                                                            no effect)
  368 0000018A 6008            STR              R0, [R1]    ; [R1] = R0
  369 0000018C         ; copy from hardware RX FIFO to software RX FIFO
  370 0000018C F7FF FF91       BL               copyHardwareToSoftware ; privat
                                                            e helper subroutine
                                                            
  371 00000190         handlerDone
  372 00000190 BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return from inter
                                                            rupt)
  373 00000192         
  374 00000192 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  375 00000194                 END                          ; end of file
              400FE618 
              400FE608 
              4000C030 
              4000C024 
              4000C028 
              4000C02C 
              4000C034 
              4000C038 
              40004420 
              4000451C 
              4000452C 
              40004528 
              E000E404 
              E000E100 
              4000C018 
              4000C000 
              4000C03C 
              4000C044 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\uart.d -o.\objects\uart.o -I.\RTE\_Target_1 -IC:\Keil
_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\
1.1.0\Device\Include\TM4C123 --predefine="__EVAL SETA 1" --predefine="__UVISION
_VERSION SETA 523" --predefine="_RTE_ SETA 1" --predefine="TM4C123GH6PM SETA 1"
 --list=.\listings\uart.lst UART.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 101 in file UART.s
   Uses
      None
Comment: .text unused
UART0_Handler 00000134

Symbol: UART0_Handler
   Definitions
      At line 323 in file UART.s
   Uses
      At line 106 in file UART.s
Comment: UART0_Handler used once
UART_InChar 000000FC

Symbol: UART_InChar
   Definitions
      At line 275 in file UART.s
   Uses
      At line 104 in file UART.s
Comment: UART_InChar used once
UART_Init 00000000

Symbol: UART_Init
   Definitions
      At line 118 in file UART.s
   Uses
      At line 103 in file UART.s
Comment: UART_Init used once
UART_OutChar 0000010E

Symbol: UART_OutChar
   Definitions
      At line 300 in file UART.s
   Uses
      At line 105 in file UART.s
Comment: UART_OutChar used once
copyHardwareToSoftware 000000B2

Symbol: copyHardwareToSoftware
   Definitions
      At line 213 in file UART.s
   Uses
      At line 358 in file UART.s
      At line 370 in file UART.s

copySoftwareToHardware 000000D4

Symbol: copySoftwareToHardware
   Definitions
      At line 237 in file UART.s
   Uses
      At line 312 in file UART.s
      At line 337 in file UART.s

h2sdone 000000D2



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: h2sdone
   Definitions
      At line 231 in file UART.s
   Uses
      At line 221 in file UART.s
      At line 224 in file UART.s

h2sloop 000000B4

Symbol: h2sloop
   Definitions
      At line 215 in file UART.s
   Uses
      At line 230 in file UART.s
Comment: h2sloop used once
handlerCheck0 00000136

Symbol: handlerCheck0
   Definitions
      At line 326 in file UART.s
   Uses
      None
Comment: handlerCheck0 unused
handlerCheck1 00000160

Symbol: handlerCheck1
   Definitions
      At line 347 in file UART.s
   Uses
      At line 331 in file UART.s
      At line 342 in file UART.s

handlerCheck2 00000178

Symbol: handlerCheck2
   Definitions
      At line 359 in file UART.s
   Uses
      At line 352 in file UART.s
Comment: handlerCheck2 used once
handlerDone 00000190

Symbol: handlerDone
   Definitions
      At line 371 in file UART.s
   Uses
      At line 364 in file UART.s
Comment: handlerDone used once
inCharLoop 00000102

Symbol: inCharLoop
   Definitions
      At line 278 in file UART.s
   Uses
      At line 282 in file UART.s
Comment: inCharLoop used once
outCharLoop 00000112




ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Symbol: outCharLoop
   Definitions
      At line 303 in file UART.s
   Uses
      At line 307 in file UART.s
Comment: outCharLoop used once
s2hdone 000000FA

Symbol: s2hdone
   Definitions
      At line 258 in file UART.s
   Uses
      At line 245 in file UART.s
      At line 248 in file UART.s

s2hloop 000000D6

Symbol: s2hloop
   Definitions
      At line 239 in file UART.s
   Uses
      At line 257 in file UART.s
Comment: s2hloop used once
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BS 00000008

Symbol: BS
   Definitions
      At line 96 in file UART.s
   Uses
      None
Comment: BS unused
CR 0000000D

Symbol: CR
   Definitions
      At line 94 in file UART.s
   Uses
      None
Comment: CR unused
DEL 0000007F

Symbol: DEL
   Definitions
      At line 99 in file UART.s
   Uses
      None
Comment: DEL unused
ESC 0000001B

Symbol: ESC
   Definitions
      At line 97 in file UART.s
   Uses
      None
Comment: ESC unused
FIFOFAIL 00000000

Symbol: FIFOFAIL
   Definitions
      At line 81 in file UART.s
   Uses
      At line 281 in file UART.s
      At line 306 in file UART.s

FIFOSIZE 00000010

Symbol: FIFOSIZE
   Definitions
      At line 79 in file UART.s
   Uses
      At line 223 in file UART.s
Comment: FIFOSIZE used once
FIFOSUCCESS 00000001

Symbol: FIFOSUCCESS
   Definitions
      At line 80 in file UART.s
   Uses
      None
Comment: FIFOSUCCESS unused
GPIO_PORTA_AFSEL_R 40004420




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Symbol: GPIO_PORTA_AFSEL_R
   Definitions
      At line 33 in file UART.s
   Uses
      At line 177 in file UART.s
Comment: GPIO_PORTA_AFSEL_R used once
GPIO_PORTA_AMSEL_R 40004528

Symbol: GPIO_PORTA_AMSEL_R
   Definitions
      At line 35 in file UART.s
   Uses
      At line 193 in file UART.s
Comment: GPIO_PORTA_AMSEL_R used once
GPIO_PORTA_DEN_R 4000451C

Symbol: GPIO_PORTA_DEN_R
   Definitions
      At line 34 in file UART.s
   Uses
      At line 182 in file UART.s
Comment: GPIO_PORTA_DEN_R used once
GPIO_PORTA_PCTL_R 4000452C

Symbol: GPIO_PORTA_PCTL_R
   Definitions
      At line 36 in file UART.s
   Uses
      At line 187 in file UART.s
Comment: GPIO_PORTA_PCTL_R used once
LF 0000000A

Symbol: LF
   Definitions
      At line 95 in file UART.s
   Uses
      None
Comment: LF unused
NVIC_EN0_INT5 00000020

Symbol: NVIC_EN0_INT5
   Definitions
      At line 30 in file UART.s
   Uses
      At line 204 in file UART.s
Comment: NVIC_EN0_INT5 used once
NVIC_EN0_R E000E100

Symbol: NVIC_EN0_R
   Definitions
      At line 31 in file UART.s
   Uses
      At line 203 in file UART.s
Comment: NVIC_EN0_R used once
NVIC_PRI1_R E000E404

Symbol: NVIC_PRI1_R
   Definitions
      At line 32 in file UART.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 197 in file UART.s
Comment: NVIC_PRI1_R used once
SPA 00000020

Symbol: SPA
   Definitions
      At line 98 in file UART.s
   Uses
      None
Comment: SPA unused
SYSCTL_RCGCGPIO_R 400FE608

Symbol: SYSCTL_RCGCGPIO_R
   Definitions
      At line 68 in file UART.s
   Uses
      At line 127 in file UART.s
Comment: SYSCTL_RCGCGPIO_R used once
SYSCTL_RCGCUART_R 400FE618

Symbol: SYSCTL_RCGCUART_R
   Definitions
      At line 69 in file UART.s
   Uses
      At line 122 in file UART.s
Comment: SYSCTL_RCGCUART_R used once
UART0_CTL_R 4000C030

Symbol: UART0_CTL_R
   Definitions
      At line 42 in file UART.s
   Uses
      At line 135 in file UART.s
      At line 172 in file UART.s

UART0_DR_R 4000C000

Symbol: UART0_DR_R
   Definitions
      At line 37 in file UART.s
   Uses
      At line 226 in file UART.s
      At line 255 in file UART.s

UART0_FBRD_R 4000C028

Symbol: UART0_FBRD_R
   Definitions
      At line 40 in file UART.s
   Uses
      At line 143 in file UART.s
Comment: UART0_FBRD_R used once
UART0_FR_R 4000C018

Symbol: UART0_FR_R
   Definitions
      At line 38 in file UART.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

      At line 217 in file UART.s
      At line 241 in file UART.s

UART0_IBRD_R 4000C024

Symbol: UART0_IBRD_R
   Definitions
      At line 39 in file UART.s
   Uses
      At line 140 in file UART.s
Comment: UART0_IBRD_R used once
UART0_ICR_R 4000C044

Symbol: UART0_ICR_R
   Definitions
      At line 46 in file UART.s
   Uses
      At line 333 in file UART.s
      At line 354 in file UART.s
      At line 366 in file UART.s

UART0_IFLS_R 4000C034

Symbol: UART0_IFLS_R
   Definitions
      At line 43 in file UART.s
   Uses
      At line 154 in file UART.s
Comment: UART0_IFLS_R used once
UART0_IM_R 4000C038

Symbol: UART0_IM_R
   Definitions
      At line 44 in file UART.s
   Uses
      At line 166 in file UART.s
      At line 308 in file UART.s
      At line 343 in file UART.s

UART0_LCRH_R 4000C02C

Symbol: UART0_LCRH_R
   Definitions
      At line 41 in file UART.s
   Uses
      At line 147 in file UART.s
Comment: UART0_LCRH_R used once
UART0_RIS_R 4000C03C

Symbol: UART0_RIS_R
   Definitions
      At line 45 in file UART.s
   Uses
      At line 327 in file UART.s
      At line 348 in file UART.s
      At line 360 in file UART.s

UART_CTL_UARTEN 00000001




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

Symbol: UART_CTL_UARTEN
   Definitions
      At line 52 in file UART.s
   Uses
      At line 137 in file UART.s
      At line 174 in file UART.s

UART_FR_RXFE 00000010

Symbol: UART_FR_RXFE
   Definitions
      At line 49 in file UART.s
   Uses
      At line 219 in file UART.s
      At line 220 in file UART.s

UART_FR_RXFF 00000040

Symbol: UART_FR_RXFF
   Definitions
      At line 47 in file UART.s
   Uses
      None
Comment: UART_FR_RXFF unused
UART_FR_TXFF 00000020

Symbol: UART_FR_TXFF
   Definitions
      At line 48 in file UART.s
   Uses
      At line 243 in file UART.s
      At line 244 in file UART.s

UART_ICR_RTIC 00000040

Symbol: UART_ICR_RTIC
   Definitions
      At line 65 in file UART.s
   Uses
      At line 367 in file UART.s
Comment: UART_ICR_RTIC used once
UART_ICR_RXIC 00000010

Symbol: UART_ICR_RXIC
   Definitions
      At line 67 in file UART.s
   Uses
      At line 355 in file UART.s
Comment: UART_ICR_RXIC used once
UART_ICR_TXIC 00000020

Symbol: UART_ICR_TXIC
   Definitions
      At line 66 in file UART.s
   Uses
      At line 334 in file UART.s
Comment: UART_ICR_TXIC used once
UART_IFLS_RX1_8 00000000




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

Symbol: UART_IFLS_RX1_8
   Definitions
      At line 53 in file UART.s
   Uses
      At line 159 in file UART.s
Comment: UART_IFLS_RX1_8 used once
UART_IFLS_TX1_8 00000000

Symbol: UART_IFLS_TX1_8
   Definitions
      At line 54 in file UART.s
   Uses
      At line 159 in file UART.s
Comment: UART_IFLS_TX1_8 used once
UART_IM_RTIM 00000040

Symbol: UART_IM_RTIM
   Definitions
      At line 55 in file UART.s
   Uses
      At line 169 in file UART.s
Comment: UART_IM_RTIM used once
UART_IM_RXIM 00000010

Symbol: UART_IM_RXIM
   Definitions
      At line 58 in file UART.s
   Uses
      At line 169 in file UART.s
Comment: UART_IM_RXIM used once
UART_IM_TXIM 00000020

Symbol: UART_IM_TXIM
   Definitions
      At line 57 in file UART.s
   Uses
      At line 169 in file UART.s
      At line 310 in file UART.s
      At line 314 in file UART.s
      At line 345 in file UART.s

UART_LCRH_FEN 00000010

Symbol: UART_LCRH_FEN
   Definitions
      At line 51 in file UART.s
   Uses
      At line 151 in file UART.s
Comment: UART_LCRH_FEN used once
UART_LCRH_WLEN_8 00000060

Symbol: UART_LCRH_WLEN_8
   Definitions
      At line 50 in file UART.s
   Uses
      At line 151 in file UART.s
Comment: UART_LCRH_WLEN_8 used once
UART_RIS_RTRIS 00000040




ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols

Symbol: UART_RIS_RTRIS
   Definitions
      At line 59 in file UART.s
   Uses
      At line 362 in file UART.s
      At line 363 in file UART.s

UART_RIS_RXRIS 00000010

Symbol: UART_RIS_RXRIS
   Definitions
      At line 63 in file UART.s
   Uses
      At line 350 in file UART.s
      At line 351 in file UART.s

UART_RIS_TXRIS 00000020

Symbol: UART_RIS_TXRIS
   Definitions
      At line 61 in file UART.s
   Uses
      At line 329 in file UART.s
      At line 330 in file UART.s

45 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

DisableInterrupts 00000000

Symbol: DisableInterrupts
   Definitions
      At line 71 in file UART.s
   Uses
      At line 120 in file UART.s
Comment: DisableInterrupts used once
EnableInterrupts 00000000

Symbol: EnableInterrupts
   Definitions
      At line 72 in file UART.s
   Uses
      At line 206 in file UART.s
Comment: EnableInterrupts used once
EndCritical 00000000

Symbol: EndCritical
   Definitions
      At line 74 in file UART.s
   Uses
      None
Comment: EndCritical unused
RxFifo_Get 00000000

Symbol: RxFifo_Get
   Definitions
      At line 90 in file UART.s
   Uses
      At line 280 in file UART.s
Comment: RxFifo_Get used once
RxFifo_Init 00000000

Symbol: RxFifo_Init
   Definitions
      At line 88 in file UART.s
   Uses
      At line 132 in file UART.s
Comment: RxFifo_Init used once
RxFifo_Put 00000000

Symbol: RxFifo_Put
   Definitions
      At line 89 in file UART.s
   Uses
      At line 229 in file UART.s
Comment: RxFifo_Put used once
RxFifo_Size 00000000

Symbol: RxFifo_Size
   Definitions
      At line 91 in file UART.s
   Uses
      At line 222 in file UART.s
Comment: RxFifo_Size used once
StartCritical 00000000

Symbol: StartCritical



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 73 in file UART.s
   Uses
      None
Comment: StartCritical unused
TxFifo_Get 00000000

Symbol: TxFifo_Get
   Definitions
      At line 86 in file UART.s
   Uses
      At line 252 in file UART.s
Comment: TxFifo_Get used once
TxFifo_Init 00000000

Symbol: TxFifo_Init
   Definitions
      At line 84 in file UART.s
   Uses
      At line 133 in file UART.s
Comment: TxFifo_Init used once
TxFifo_Put 00000000

Symbol: TxFifo_Put
   Definitions
      At line 85 in file UART.s
   Uses
      At line 305 in file UART.s
Comment: TxFifo_Put used once
TxFifo_Size 00000000

Symbol: TxFifo_Size
   Definitions
      At line 87 in file UART.s
   Uses
      At line 246 in file UART.s
      At line 340 in file UART.s

WaitForInterrupt 00000000

Symbol: WaitForInterrupt
   Definitions
      At line 75 in file UART.s
   Uses
      None
Comment: WaitForInterrupt unused
13 symbols
412 symbols in table
